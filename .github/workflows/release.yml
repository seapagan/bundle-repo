name: Build and Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: Build ${{ matrix.binary_target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            binary_target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            binary_target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            binary_target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            binary_target: armv7-unknown-linux-gnueabihf
          - os: windows-latest
            binary_target: x86_64-pc-windows-msvc
          - os: macos-latest
            binary_target: x86_64-apple-darwin
          - os: macos-latest
            binary_target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install musl tools
        if: matrix.binary_target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y musl-tools

      - name: Install ARM cross-compilation tools
        if:
          matrix.binary_target == 'aarch64-unknown-linux-gnu' ||
          matrix.binary_target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get update
          if [[ "${{ matrix.binary_target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [[ "${{ matrix.binary_target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf
          fi

      - name: Install target
        run: rustup target add ${{ matrix.binary_target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.binary_target }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.binary_target }}/release
          BINARY_NAME="bundlerepo"
          tar -czf ../../../bundlerepo-${{ github.ref_name }}-${{ matrix.binary_target }}.tar.gz $BINARY_NAME
          cd -

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target/${{ matrix.binary_target }}/release
          $BINARY_NAME = "bundlerepo.exe"
          Compress-Archive -Path $BINARY_NAME -DestinationPath ../../../bundlerepo-${{ github.ref_name }}-${{ matrix.binary_target }}.zip
          cd -

      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file:
            bundlerepo-${{ github.ref_name }}-${{ matrix.binary_target }}.tar.gz
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file:
            bundlerepo-${{ github.ref_name }}-${{ matrix.binary_target }}.zip
          tag: ${{ github.ref }}
          overwrite: true
